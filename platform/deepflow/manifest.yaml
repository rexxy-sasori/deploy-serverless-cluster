---
# Source: deepflow/charts/deepflow-agent/templates/RBAC.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: deepflow-agent
---
# Source: deepflow/charts/grafana/templates/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
automountServiceAccountToken: false
metadata:
  labels:
    helm.sh/chart: grafana-7.3.12
    app.kubernetes.io/name: grafana
    app.kubernetes.io/instance: deepflow
    app.kubernetes.io/version: "10.4.3"
    app.kubernetes.io/managed-by: Helm
  name: deepflow-grafana
  namespace: deepflow
---
# Source: deepflow/templates/RBAC.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: deepflow-server
---
# Source: deepflow/charts/grafana/templates/secret.yaml
apiVersion: v1
kind: Secret
metadata:
  name: deepflow-grafana
  namespace: deepflow
  labels:
    helm.sh/chart: grafana-7.3.12
    app.kubernetes.io/name: grafana
    app.kubernetes.io/instance: deepflow
    app.kubernetes.io/version: "10.4.3"
    app.kubernetes.io/managed-by: Helm
type: Opaque
data:
  
  admin-user: "YWRtaW4="
  admin-password: "ZGVlcGZsb3c="
  ldap-toml: ""
---
# Source: deepflow/charts/clickhouse/templates/configmap.yaml
# clickhouse ConfigMap
kind: ConfigMap
apiVersion: v1
metadata:
  name: deepflow-clickhouse-config
  labels:
    helm.sh/chart: clickhouse-0.1.000
    app: deepflow
    component: clickhouse
    app.kubernetes.io/name: clickhouse
    app.kubernetes.io/instance: deepflow
    app.kubernetes.io/version: "21.8.15.7"
    app.kubernetes.io/managed-by: Helm
data:
  config.xml: |-
    <?xml version="1.0"?>
    <!--
      NOTE: User and query level settings are set up in "users.xml" file.
      If you have accidentally specified user-level settings here, server won't start.
      You can either move the settings to the right place inside "users.xml" file
       or add <skip_check_for_incorrect_settings>1</skip_check_for_incorrect_settings> here.
    -->
    <yandex>
        <logger>
            <!-- Possible levels [1]:

              - none (turns off logging)
              - fatal
              - critical
              - error
              - warning
              - notice
              - information
              - debug
              - trace

                [1]: https://github.com/pocoproject/poco/blob/poco-1.9.4-release/Foundation/include/Poco/Logger.h#L105-L114
            -->
            <level>warning</level>
            <!-- Rotation policy
                 See https://github.com/pocoproject/poco/blob/poco-1.9.4-release/Foundation/include/Poco/FileChannel.h#L54-L85
              -->
            <size>1000M</size>
            <count>10</count>
            <console>1</console>
        </logger>

        <!-- It is the name that will be shown in the clickhouse-client.
             By default, anything with "production" will be highlighted in red in query prompt.
        -->
        <!--display_name>production</display_name-->

        <!-- Port for HTTP API. See also 'https_port' for secure connections.
             This interface is also used by ODBC and JDBC drivers (DataGrip, Dbeaver, ...)
             and by most of web interfaces (embedded UI, Grafana, Redash, ...).
          -->
        <http_port>8123</http_port>

        <!-- Port for interaction by native protocol with:
             - clickhouse-client and other native ClickHouse tools (clickhouse-benchmark, clickhouse-copier);
             - clickhouse-server with other clickhouse-servers for distributed query processing;
             - ClickHouse drivers and applications supporting native protocol
             (this protocol is also informally called as "the TCP protocol");
             See also 'tcp_port_secure' for secure connections.
        -->
        <tcp_port>9000</tcp_port>

        <!-- Compatibility with MySQL protocol.
             ClickHouse will pretend to be MySQL for applications connecting to this port.
        -->
        <!-- <mysql_port>9004</mysql_port> -->

        <!-- Compatibility with PostgreSQL protocol.
             ClickHouse will pretend to be PostgreSQL for applications connecting to this port.
        -->
        <!-- <postgresql_port>9005</postgresql_port> -->

        <!-- HTTP API with TLS (HTTPS).
             You have to configure certificate to enable this interface.
             See the openSSL section below.
        -->
        <!-- <https_port>8443</https_port> -->

        <!-- Native interface with TLS.
             You have to configure certificate to enable this interface.
             See the openSSL section below.
        -->
        <!-- <tcp_port_secure>9440</tcp_port_secure> -->

        <!-- Native interface wrapped with PROXYv1 protocol
             PROXYv1 header sent for every connection.
             ClickHouse will extract information about proxy-forwarded client address from the header.
        -->
        <!-- <tcp_with_proxy_port>9011</tcp_with_proxy_port> -->

        <!-- Port for communication between replicas. Used for data exchange.
             It provides low-level data access between servers.
             This port should not be accessible from untrusted networks.
             See also 'interserver_http_credentials'.
             Data transferred over connections to this port should not go through untrusted networks.
             See also 'interserver_https_port'.
          -->
        <interserver_http_port>9009</interserver_http_port>

        <!-- Port for communication between replicas with TLS.
             You have to configure certificate to enable this interface.
             See the openSSL section below.
             See also 'interserver_http_credentials'.
          -->
        <!-- <interserver_https_port>9010</interserver_https_port> -->

        <!-- Hostname that is used by other replicas to request this server.
             If not specified, than it is determined analogous to 'hostname -f' command.
             This setting could be used to switch replication to another network interface
             (the server may be connected to multiple networks via multiple addresses)
          -->
        <!--
        <interserver_http_host>example.yandex.ru</interserver_http_host>
        -->

        <!-- You can specify credentials for authenthication between replicas.
             This is required when interserver_https_port is accessible from untrusted networks,
             and also recommended to avoid SSRF attacks from possibly compromised services in your network.
          -->
        <!--<interserver_http_credentials>
            <user>interserver</user>
            <password></password>
        </interserver_http_credentials>-->

        <!-- Listen specified address.
             Use :: (wildcard IPv6 address), if you want to accept connections both with IPv4 and IPv6 from everywhere.
             Notes:
             If you open connections from wildcard address, make sure that at least one of the following measures applied:
             - server is protected by firewall and not accessible from untrusted networks;
             - all users are restricted to subset of network addresses (see users.xml);
             - all users have strong passwords, only secure (TLS) interfaces are accessible, or connections are only made via TLS interfaces.
             - users without password have readonly access.
             See also: https://www.shodan.io/search?query=clickhouse
          -->
        <!-- <listen_host>::</listen_host>-->

        <!-- Same for hosts without support for IPv6: -->
        <listen_host>0.0.0.0</listen_host>

        <!-- Default values - try listen localhost on IPv4 and IPv6. -->
        <!--
        <listen_host>127.0.0.1</listen_host>
        -->

        <!-- Don't exit if IPv6 or IPv4 networks are unavailable while trying to listen. -->
        <!-- <listen_try>0</listen_try> -->

        <!-- Allow multiple servers to listen on the same address:port. This is not recommended.
          -->
        <!-- <listen_reuse_port>0</listen_reuse_port> -->

        <!-- <listen_backlog>64</listen_backlog> -->

        <max_connections>4096</max_connections>

        <!-- For 'Connection: keep-alive' in HTTP 1.1 -->
        <keep_alive_timeout>3</keep_alive_timeout>

        <!-- gRPC protocol (see src/Server/grpc_protos/clickhouse_grpc.proto for the API) -->
        <!-- <grpc_port>9100</grpc_port> -->
        <grpc>
            <enable_ssl>false</enable_ssl>

            <!-- The following two files are used only if enable_ssl=1 -->
            <ssl_cert_file>/path/to/ssl_cert_file</ssl_cert_file>
            <ssl_key_file>/path/to/ssl_key_file</ssl_key_file>

            <!-- Whether server will request client for a certificate -->
            <ssl_require_client_auth>false</ssl_require_client_auth>

            <!-- The following file is used only if ssl_require_client_auth=1 -->
            <ssl_ca_cert_file>/path/to/ssl_ca_cert_file</ssl_ca_cert_file>

            <!-- Default compression algorithm (applied if client doesn't specify another algorithm).
                 Supported algorithms: none, deflate, gzip, stream_gzip -->
            <compression>deflate</compression>

            <!-- Default compression level (applied if client doesn't specify another level).
                 Supported levels: none, low, medium, high -->
            <compression_level>medium</compression_level>

            <!-- Send/receive message size limits in bytes. -1 means unlimited -->
            <max_send_message_size>-1</max_send_message_size>
            <max_receive_message_size>-1</max_receive_message_size>

            <!-- Enable if you want very detailed logs -->
            <verbose_logs>false</verbose_logs>
        </grpc>

        <!-- Used with https_port and tcp_port_secure. Full ssl options list: https://github.com/ClickHouse-Extras/poco/blob/master/NetSSL_OpenSSL/include/Poco/Net/SSLManager.h#L71 -->
        <openSSL>
            <server> <!-- Used for https server AND secure tcp port -->
                <!-- openssl req -subj "/CN=localhost" -new -newkey rsa:2048 -days 365 -nodes -x509 -keyout /etc/clickhouse-server/server.key -out /etc/clickhouse-server/server.crt -->
                <certificateFile>/etc/clickhouse-server/server.crt</certificateFile>
                <privateKeyFile>/etc/clickhouse-server/server.key</privateKeyFile>
                <!-- dhparams are optional. You can delete the <dhParamsFile> element.
                     To generate dhparams, use the following command:
                      openssl dhparam -out /etc/clickhouse-server/dhparam.pem 4096
                     Only file format with BEGIN DH PARAMETERS is supported.
                  -->
                <dhParamsFile>/etc/clickhouse-server/dhparam.pem</dhParamsFile>
                <verificationMode>none</verificationMode>
                <loadDefaultCAFile>true</loadDefaultCAFile>
                <cacheSessions>true</cacheSessions>
                <disableProtocols>sslv2,sslv3</disableProtocols>
                <preferServerCiphers>true</preferServerCiphers>
            </server>

            <client> <!-- Used for connecting to https dictionary source and secured Zookeeper communication -->
                <loadDefaultCAFile>true</loadDefaultCAFile>
                <cacheSessions>true</cacheSessions>
                <disableProtocols>sslv2,sslv3</disableProtocols>
                <preferServerCiphers>true</preferServerCiphers>
                <!-- Use for self-signed: <verificationMode>none</verificationMode> -->
                <invalidCertificateHandler>
                    <!-- Use for self-signed: <name>AcceptCertificateHandler</name> -->
                    <name>RejectCertificateHandler</name>
                </invalidCertificateHandler>
            </client>
        </openSSL>

        <!-- Default root page on http[s] server. For example load UI from https://tabix.io/ when opening http://localhost:8123 -->
        <!--
        <http_server_default_response><![CDATA[<html ng-app="SMI2"><head><base href="http://ui.tabix.io/"></head><body><div ui-view="" class="content-ui"></div><script src="http://loader.tabix.io/master.js"></script></body></html>]]></http_server_default_response>
        -->

        <!-- Maximum number of concurrent queries. -->
        <max_concurrent_queries>2000</max_concurrent_queries>

        <!-- Maximum memory usage (resident set size) for server process.
             Zero value or unset means default. Default is "max_server_memory_usage_to_ram_ratio" of available physical RAM.
             If the value is larger than "max_server_memory_usage_to_ram_ratio" of available physical RAM, it will be cut down.

             The constraint is checked on query execution time.
             If a query tries to allocate memory and the current memory usage plus allocation is greater
              than specified threshold, exception will be thrown.

             It is not practical to set this constraint to small values like just a few gigabytes,
              because memory allocator will keep this amount of memory in caches and the server will deny service of queries.
          -->
        <max_server_memory_usage>0</max_server_memory_usage>

        <!-- Maximum number of threads in the Global thread pool.
        This will default to a maximum of 10000 threads if not specified.
        This setting will be useful in scenarios where there are a large number
        of distributed queries that are running concurrently but are idling most
        of the time, in which case a higher number of threads might be required.
        -->

        <max_thread_pool_size>10000</max_thread_pool_size>

        <!-- On memory constrained environments you may have to set this to value larger than 1.
          -->
        <max_server_memory_usage_to_ram_ratio>0.9</max_server_memory_usage_to_ram_ratio>

        <!-- Simple server-wide memory profiler. Collect a stack trace at every peak allocation step (in bytes).
             Data will be stored in system.trace_log table with query_id = empty string.
             Zero means disabled.
          -->
        <total_memory_profiler_step>4194304</total_memory_profiler_step>

        <!-- Collect random allocations and deallocations and write them into system.trace_log with 'MemorySample' trace_type.
             The probability is for every alloc/free regardless to the size of the allocation.
             Note that sampling happens only when the amount of untracked memory exceeds the untracked memory limit,
              which is 4 MiB by default but can be lowered if 'total_memory_profiler_step' is lowered.
             You may want to set 'total_memory_profiler_step' to 1 for extra fine grained sampling.
          -->
        <total_memory_tracker_sample_probability>0</total_memory_tracker_sample_probability>

        <!-- Set limit on number of open files (default: maximum). This setting makes sense on Mac OS X because getrlimit() fails to retrieve
             correct maximum value. -->
        <!-- <max_open_files>262144</max_open_files> -->

        <!-- Size of cache of uncompressed blocks of data, used in tables of MergeTree family.
             In bytes. Cache is single for server. Memory is allocated only on demand.
             Cache is used when 'use_uncompressed_cache' user setting turned on (off by default).
             Uncompressed cache is advantageous only for very short queries and in rare cases.

             Note: uncompressed cache can be pointless for lz4, because memory bandwidth
             is slower than multi-core decompression on some server configurations.
             Enabling it can sometimes paradoxically make queries slower.
          -->
        <uncompressed_cache_size>8589934592</uncompressed_cache_size>

        <!-- Approximate size of mark cache, used in tables of MergeTree family.
             In bytes. Cache is single for server. Memory is allocated only on demand.
             You should not lower this value.
          -->
        <mark_cache_size>5368709120</mark_cache_size>


        <!-- If you enable the `min_bytes_to_use_mmap_io` setting,
             the data in MergeTree tables can be read with mmap to avoid copying from kernel to userspace.
             It makes sense only for large files and helps only if data reside in page cache.
             To avoid frequent open/mmap/munmap/close calls (which are very expensive due to consequent page faults)
             and to reuse mappings from several threads and queries,
             the cache of mapped files is maintained. Its size is the number of mapped regions (usually equal to the number of mapped files).
             The amount of data in mapped files can be monitored
             in system.metrics, system.metric_log by the MMappedFiles, MMappedFileBytes metrics
             and in system.asynchronous_metrics, system.asynchronous_metrics_log by the MMapCacheCells metric,
             and also in system.events, system.processes, system.query_log, system.query_thread_log by the
             CreatedReadBufferMMap, CreatedReadBufferMMapFailed, MMappedFileCacheHits, MMappedFileCacheMisses events.
             Note that the amount of data in mapped files does not consume memory directly and is not accounted
             in query or server memory usage - because this memory can be discarded similar to OS page cache.
             The cache is dropped (the files are closed) automatically on removal of old parts in MergeTree,
             also it can be dropped manually by the SYSTEM DROP MMAP CACHE query.
          -->
        <mmap_cache_size>1000</mmap_cache_size>

        <path>/var/lib/clickhouse/</path>

        <!-- Path to data directory, with trailing slash. -->
        <storage_configuration>
            <disks>
                <path_0>
                    <path>/var/lib/clickhouse_storage/</path>
                </path_0>
            </disks>
            <policies>
                <df_storage>
                    <volumes>
                        <vol_path_0>
                            <disk>path_0</disk>
                        </vol_path_0>
                    </volumes>
                </df_storage>
            </policies>
        </storage_configuration>

        <!-- Path to temporary data for processing hard queries. -->
        <tmp_path>/var/lib/clickhouse/tmp/</tmp_path>

        <!-- Policy from the <storage_configuration> for the temporary files.
             If not set <tmp_path> is used, otherwise <tmp_path> is ignored.

             Notes:
             - move_factor              is ignored
             - keep_free_space_bytes    is ignored
             - max_data_part_size_bytes is ignored
             - you must have exactly one volume in that policy
        -->
        <!-- <tmp_policy>df_storage</tmp_policy> -->

        <!-- Directory with user provided files that are accessible by 'file' table function. -->
        <user_files_path>/var/lib/clickhouse/user_files/</user_files_path>

        <!-- LDAP server definitions. -->
        <ldap_servers>
            <!-- List LDAP servers with their connection parameters here to later 1) use them as authenticators for dedicated local users,
                  who have 'ldap' authentication mechanism specified instead of 'password', or to 2) use them as remote user directories.
                 Parameters:
                    host - LDAP server hostname or IP, this parameter is mandatory and cannot be empty.
                    port - LDAP server port, default is 636 if enable_tls is set to true, 389 otherwise.
                    bind_dn - template used to construct the DN to bind to.
                            The resulting DN will be constructed by replacing all '{user_name}' substrings of the template with the actual
                             user name during each authentication attempt.
                    verification_cooldown - a period of time, in seconds, after a successful bind attempt, during which a user will be assumed
                             to be successfully authenticated for all consecutive requests without contacting the LDAP server.
                            Specify 0 (the default) to disable caching and force contacting the LDAP server for each authentication request.
                    enable_tls - flag to trigger use of secure connection to the LDAP server.
                            Specify 'no' for plain text (ldap://) protocol (not recommended).
                            Specify 'yes' for LDAP over SSL/TLS (ldaps://) protocol (recommended, the default).
                            Specify 'starttls' for legacy StartTLS protocol (plain text (ldap://) protocol, upgraded to TLS).
                    tls_minimum_protocol_version - the minimum protocol version of SSL/TLS.
                            Accepted values are: 'ssl2', 'ssl3', 'tls1.0', 'tls1.1', 'tls1.2' (the default).
                    tls_require_cert - SSL/TLS peer certificate verification behavior.
                            Accepted values are: 'never', 'allow', 'try', 'demand' (the default).
                    tls_cert_file - path to certificate file.
                    tls_key_file - path to certificate key file.
                    tls_ca_cert_file - path to CA certificate file.
                    tls_ca_cert_dir - path to the directory containing CA certificates.
                    tls_cipher_suite - allowed cipher suite (in OpenSSL notation).
                 Example:
                    <my_ldap_server>
                        <host>localhost</host>
                        <port>636</port>
                        <bind_dn>uid={user_name},ou=users,dc=example,dc=com</bind_dn>
                        <verification_cooldown>300</verification_cooldown>
                        <enable_tls>yes</enable_tls>
                        <tls_minimum_protocol_version>tls1.2</tls_minimum_protocol_version>
                        <tls_require_cert>demand</tls_require_cert>
                        <tls_cert_file>/path/to/tls_cert_file</tls_cert_file>
                        <tls_key_file>/path/to/tls_key_file</tls_key_file>
                        <tls_ca_cert_file>/path/to/tls_ca_cert_file</tls_ca_cert_file>
                        <tls_ca_cert_dir>/path/to/tls_ca_cert_dir</tls_ca_cert_dir>
                        <tls_cipher_suite>ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:AES256-GCM-SHA384</tls_cipher_suite>
                    </my_ldap_server>
            -->
        </ldap_servers>

        <!-- To enable Kerberos authentication support for HTTP requests (GSS-SPNEGO), for those users who are explicitly configured
              to authenticate via Kerberos, define a single 'kerberos' section here.
             Parameters:
                principal - canonical service principal name, that will be acquired and used when accepting security contexts.
                        This parameter is optional, if omitted, the default principal will be used.
                        This parameter cannot be specified together with 'realm' parameter.
                realm - a realm, that will be used to restrict authentication to only those requests whose initiator's realm matches it.
                        This parameter is optional, if omitted, no additional filtering by realm will be applied.
                        This parameter cannot be specified together with 'principal' parameter.
             Example:
                <kerberos />
             Example:
                <kerberos>
                    <principal>HTTP/clickhouse.example.com@EXAMPLE.COM</principal>
                </kerberos>
             Example:
                <kerberos>
                    <realm>EXAMPLE.COM</realm>
                </kerberos>
        -->

        <!-- Sources to read users, roles, access rights, profiles of settings, quotas. -->
        <user_directories>
            <users_xml>
                <!-- Path to configuration file with predefined users. -->
                <path>users.xml</path>
            </users_xml>
            <local_directory>
                <!-- Path to folder where users created by SQL commands are stored. -->
                <path>/var/lib/clickhouse/access/</path>
            </local_directory>

            <!-- To add an LDAP server as a remote user directory of users that are not defined locally, define a single 'ldap' section
                  with the following parameters:
                    server - one of LDAP server names defined in 'ldap_servers' config section above.
                            This parameter is mandatory and cannot be empty.
                    roles - section with a list of locally defined roles that will be assigned to each user retrieved from the LDAP server.
                            If no roles are specified here or assigned during role mapping (below), user will not be able to perform any
                             actions after authentication.
                    role_mapping - section with LDAP search parameters and mapping rules.
                            When a user authenticates, while still bound to LDAP, an LDAP search is performed using search_filter and the
                             name of the logged in user. For each entry found during that search, the value of the specified attribute is
                             extracted. For each attribute value that has the specified prefix, the prefix is removed, and the rest of the
                             value becomes the name of a local role defined in ClickHouse, which is expected to be created beforehand by
                             CREATE ROLE command.
                            There can be multiple 'role_mapping' sections defined inside the same 'ldap' section. All of them will be
                             applied.
                        base_dn - template used to construct the base DN for the LDAP search.
                                The resulting DN will be constructed by replacing all '{user_name}' and '{bind_dn}' substrings
                                 of the template with the actual user name and bind DN during each LDAP search.
                        scope - scope of the LDAP search.
                                Accepted values are: 'base', 'one_level', 'children', 'subtree' (the default).
                        search_filter - template used to construct the search filter for the LDAP search.
                                The resulting filter will be constructed by replacing all '{user_name}', '{bind_dn}', and '{base_dn}'
                                 substrings of the template with the actual user name, bind DN, and base DN during each LDAP search.
                                Note, that the special characters must be escaped properly in XML.
                        attribute - attribute name whose values will be returned by the LDAP search.
                        prefix - prefix, that will be expected to be in front of each string in the original list of strings returned by
                                 the LDAP search. Prefix will be removed from the original strings and resulting strings will be treated
                                 as local role names. Empty, by default.
                 Example:
                    <ldap>
                        <server>my_ldap_server</server>
                        <roles>
                            <my_local_role1 />
                            <my_local_role2 />
                        </roles>
                        <role_mapping>
                            <base_dn>ou=groups,dc=example,dc=com</base_dn>
                            <scope>subtree</scope>
                            <search_filter>(&amp;(objectClass=groupOfNames)(member={bind_dn}))</search_filter>
                            <attribute>cn</attribute>
                            <prefix>clickhouse_</prefix>
                        </role_mapping>
                    </ldap>
            -->
        </user_directories>

        <!-- Default profile of settings. -->
        <default_profile>default</default_profile>

        <!-- Comma-separated list of prefixes for user-defined settings. -->
        <custom_settings_prefixes></custom_settings_prefixes>

        <!-- System profile of settings. This settings are used by internal processes (Distributed DDL worker and so on). -->
        <!-- <system_profile>default</system_profile> -->

        <!-- Buffer profile of settings.
             This settings are used by Buffer storage to flush data to the underlying table.
             Default: used from system_profile directive.
        -->
        <!-- <buffer_profile>default</buffer_profile> -->

        <!-- Default database. -->
        <default_database>default</default_database>

        <!-- Server time zone could be set here.

             Time zone is used when converting between String and DateTime types,
              when printing DateTime in text formats and parsing DateTime from text,
              it is used in date and time related functions, if specific time zone was not passed as an argument.

             Time zone is specified as identifier from IANA time zone database, like UTC or Africa/Abidjan.
             If not specified, system time zone at server startup is used.

             Please note, that server could display time zone alias instead of specified name.
             Example: W-SU is an alias for Europe/Moscow and Zulu is an alias for UTC.
        -->
        <!-- <timezone>Europe/Moscow</timezone> -->

        <!-- You can specify umask here (see "man umask"). Server will apply it on startup.
             Number is always parsed as octal. Default umask is 027 (other users cannot read logs, data files, etc; group can only read).
        -->
        <!-- <umask>022</umask> -->

        <!-- Perform mlockall after startup to lower first queries latency
              and to prevent clickhouse executable from being paged out under high IO load.
             Enabling this option is recommended but will lead to increased startup time for up to a few seconds.
        -->
        <mlock_executable>true</mlock_executable>

        <!-- Reallocate memory for machine code ("text") using huge pages. Highly experimental. -->
        <remap_executable>false</remap_executable>

        <!-- Configuration of clusters that could be used in Distributed tables.
             https://clickhouse.tech/docs/en/operations/table_engines/distributed/
          -->
        <remote_servers>
            <df_cluster>
                <shard>
                     <replica>
                          <host>deepflow-clickhouse-0.deepflow-clickhouse-headless</host>
                          <port>9000</port>
                          <user>default</user>
                          <password></password>
                     </replica>
                </shard>
            </df_cluster>
        </remote_servers>

        <!-- The list of hosts allowed to use in URL-related storage engines and table functions.
            If this section is not present in configuration, all hosts are allowed.
        -->
        <!--<remote_url_allow_hosts>-->
            <!-- Host should be specified exactly as in URL. The name is checked before DNS resolution.
                Example: "yandex.ru", "yandex.ru." and "www.yandex.ru" are different hosts.
                        If port is explicitly specified in URL, the host:port is checked as a whole.
                        If host specified here without port, any port with this host allowed.
                        "yandex.ru" -> "yandex.ru:443", "yandex.ru:80" etc. is allowed, but "yandex.ru:80" -> only "yandex.ru:80" is allowed.
                If the host is specified as IP address, it is checked as specified in URL. Example: "[2a02:6b8:a::a]".
                If there are redirects and support for redirects is enabled, every redirect (the Location field) is checked.
            -->

            <!-- Regular expression can be specified. RE2 engine is used for regexps.
                Regexps are not aligned: don't forget to add ^ and $. Also don't forget to escape dot (.) metacharacter
                (forgetting to do so is a common source of error).
            -->
        <!--</remote_url_allow_hosts>-->

        <!-- If element has 'incl' attribute, then for it's value will be used corresponding substitution from another file.
             By default, path to file with substitutions is /etc/metrika.xml. It could be changed in config in 'include_from' element.
             Values for substitutions are specified in /yandex/name_of_substitution elements in that file.
          -->

        <!-- ZooKeeper is used to store metadata about replicas, when using Replicated tables.
             Optional. If you don't use replicated tables, you could omit that.

             See https://clickhouse.tech/docs/en/engines/table-engines/mergetree-family/replication/
          -->

        <!-- Substitutions for parameters of replicated tables.
              Optional. If you don't use replicated tables, you could omit that.

             See https://clickhouse.tech/docs/en/engines/table-engines/mergetree-family/replication/#creating-replicated-tables
          -->
        <macros>
        </macros>

        <!-- Reloading interval for embedded dictionaries, in seconds. Default: 3600. -->
        <builtin_dictionaries_reload_interval>3600</builtin_dictionaries_reload_interval>


        <!-- Maximum session timeout, in seconds. Default: 3600. -->
        <max_session_timeout>3600</max_session_timeout>

        <!-- Default session timeout, in seconds. Default: 60. -->
        <default_session_timeout>60</default_session_timeout>

        <!-- Sending data to Graphite for monitoring. Several sections can be defined. -->
        <!--
            interval - send every X second
            root_path - prefix for keys
            hostname_in_path - append hostname to root_path (default = true)
            metrics - send data from table system.metrics
            events - send data from table system.events
            asynchronous_metrics - send data from table system.asynchronous_metrics
        -->
        <!--
        <graphite>
            <host>localhost</host>
            <port>42000</port>
            <timeout>0.1</timeout>
            <interval>60</interval>
            <root_path>one_min</root_path>
            <hostname_in_path>true</hostname_in_path>

            <metrics>true</metrics>
            <events>true</events>
            <events_cumulative>false</events_cumulative>
            <asynchronous_metrics>true</asynchronous_metrics>
        </graphite>
        <graphite>
            <host>localhost</host>
            <port>42000</port>
            <timeout>0.1</timeout>
            <interval>1</interval>
            <root_path>one_sec</root_path>

            <metrics>true</metrics>
            <events>true</events>
            <events_cumulative>false</events_cumulative>
            <asynchronous_metrics>false</asynchronous_metrics>
        </graphite>
        -->

        <!-- Serve endpoint for Prometheus monitoring. -->
        <!--
            endpoint - mertics path (relative to root, statring with "/")
            port - port to setup server. If not defined or 0 than http_port used
            metrics - send data from table system.metrics
            events - send data from table system.events
            asynchronous_metrics - send data from table system.asynchronous_metrics
            status_info - send data from different component from CH, ex: Dictionaries status
        -->
        <!--
        <prometheus>
            <endpoint>/metrics</endpoint>
            <port>9363</port>

            <metrics>true</metrics>
            <events>true</events>
            <asynchronous_metrics>true</asynchronous_metrics>
            <status_info>true</status_info>
        </prometheus>
        -->

        <!-- Query log. Used only for queries with setting log_queries = 1. -->
        <query_log>
            <!-- What table to insert data. If table is not exist, it will be created.
                 When query log structure is changed after system update,
                  then old table will be renamed and new table will be created automatically.
            -->
            <database>system</database>
            <table>query_log</table>
            <!--
                PARTITION BY expr: https://clickhouse.yandex/docs/en/table_engines/mergetree-family/custom_partitioning_key/
                Example:
                    event_date
                    toMonday(event_date)
                    toYYYYMM(event_date)
                    toStartOfHour(event_time)
            -->
            <partition_by>toYYYYMM(event_date)</partition_by>
            <!--
                Table TTL specification: https://clickhouse.tech/docs/en/engines/table-engines/mergetree-family/mergetree/#mergetree-table-ttl
                Example:
                    event_date + INTERVAL 1 WEEK
                    event_date + INTERVAL 7 DAY DELETE
                    event_date + INTERVAL 2 WEEK TO DISK 'bbb'

            <ttl>event_date + INTERVAL 15 DAY DELETE</ttl>
            -->
            <ttl>event_date + INTERVAL 15 DAY DELETE</ttl>

            <!-- Instead of partition_by, you can provide full engine expression (starting with ENGINE = ) with parameters,
                 Example: <engine>ENGINE = MergeTree PARTITION BY toYYYYMM(event_date) ORDER BY (event_date, event_time) SETTINGS index_granularity = 1024</engine>
              -->

            <!-- Interval of flushing data. -->
            <flush_interval_milliseconds>7500</flush_interval_milliseconds>
        </query_log>

        <!-- Trace log. Stores stack traces collected by query profilers.
             See query_profiler_real_time_period_ns and query_profiler_cpu_time_period_ns settings. -->
        <trace_log>
            <database>system</database>
            <table>trace_log</table>

            <partition_by>toYYYYMM(event_date)</partition_by>
            <flush_interval_milliseconds>7500</flush_interval_milliseconds>
            <ttl>event_date + INTERVAL 15 DAY DELETE</ttl>
        </trace_log>

        <!-- Query thread log. Has information about all threads participated in query execution.
             Used only for queries with setting log_query_threads = 1. -->
        <query_thread_log>
            <database>system</database>
            <table>query_thread_log</table>
            <partition_by>toYYYYMM(event_date)</partition_by>
            <flush_interval_milliseconds>7500</flush_interval_milliseconds>
            <ttl>event_date + INTERVAL 15 DAY DELETE</ttl>
        </query_thread_log>

        <!-- Uncomment if use part log.
             Part log contains information about all actions with parts in MergeTree tables (creation, deletion, merges, downloads).
        <part_log>
            <database>system</database>
            <table>part_log</table>
            <flush_interval_milliseconds>7500</flush_interval_milliseconds>
        </part_log>
        -->

        <!-- Uncomment to write text log into table.
             Text log contains all information from usual server log but stores it in structured and efficient way.
             The level of the messages that goes to the table can be limited (<level>), if not specified all messages will go to the table.
        <text_log>
            <database>system</database>
            <table>text_log</table>
            <flush_interval_milliseconds>7500</flush_interval_milliseconds>
            <level></level>
        </text_log>
        -->

        <!-- Metric log contains rows with current values of ProfileEvents, CurrentMetrics collected with "collect_interval_milliseconds" interval. -->
        <metric_log>
            <database>system</database>
            <table>metric_log</table>
            <flush_interval_milliseconds>7500</flush_interval_milliseconds>
            <collect_interval_milliseconds>10000</collect_interval_milliseconds>
            <ttl>event_date + INTERVAL 15 DAY DELETE</ttl>
        </metric_log>

        <!--
            Asynchronous metric log contains values of metrics from
            system.asynchronous_metrics.
        -->
        <asynchronous_metric_log>
            <database>system</database>
            <table>asynchronous_metric_log</table>
            <!--
                Asynchronous metrics are updated once a minute, so there is
                no need to flush more often.
            -->
            <flush_interval_milliseconds>60000</flush_interval_milliseconds>
            <ttl>event_date + INTERVAL 15 DAY DELETE</ttl>
        </asynchronous_metric_log>

        <!--
            OpenTelemetry log contains OpenTelemetry trace spans.
        -->
        <opentelemetry_span_log>
            <!--
                The default table creation code is insufficient, this <engine> spec
                is a workaround. There is no 'event_time' for this log, but two times,
                start and finish. It is sorted by finish time, to avoid inserting
                data too far away in the past (probably we can sometimes insert a span
                that is seconds earlier than the last span in the table, due to a race
                between several spans inserted in parallel). This gives the spans a
                global order that we can use to e.g. retry insertion into some external
                system.
            -->
            <engine>
                engine MergeTree
                partition by toYYYYMM(finish_date)
                order by (finish_date, finish_time_us, trace_id)
            </engine>
            <database>system</database>
            <table>opentelemetry_span_log</table>
            <flush_interval_milliseconds>7500</flush_interval_milliseconds>
        </opentelemetry_span_log>


        <!-- Crash log. Stores stack traces for fatal errors.
             This table is normally empty. -->
        <crash_log>
            <database>system</database>
            <table>crash_log</table>

            <partition_by />
            <flush_interval_milliseconds>1000</flush_interval_milliseconds>
        </crash_log>

        <!-- Parameters for embedded dictionaries, used in Yandex.Metrica.
             See https://clickhouse.yandex/docs/en/dicts/internal_dicts/
        -->

        <!-- Path to file with region hierarchy. -->
        <!-- <path_to_regions_hierarchy_file>/opt/geo/regions_hierarchy.txt</path_to_regions_hierarchy_file> -->

        <!-- Path to directory with files containing names of regions -->
        <!-- <path_to_regions_names_files>/opt/geo/</path_to_regions_names_files> -->


        <!-- <top_level_domains_path>/var/lib/clickhouse/top_level_domains/</top_level_domains_path> -->
        <!-- Custom TLD lists.
             Format: <name>/path/to/file</name>

             Changes will not be applied w/o server restart.
             Path to the list is under top_level_domains_path (see above).
        -->
        <top_level_domains_lists>
            <!--
            <public_suffix_list>/path/to/public_suffix_list.dat</public_suffix_list>
            -->
        </top_level_domains_lists>

        <!-- Configuration of external dictionaries. See:
             https://clickhouse.tech/docs/en/sql-reference/dictionaries/external-dictionaries/external-dicts
        -->
        <dictionaries_config>*_dictionary.xml</dictionaries_config>

        <!-- Uncomment if you want data to be compressed 30-100% better.
             Don't do that if you just started using ClickHouse.
          -->
        <!--
        <compression>
            <!- - Set of variants. Checked in order. Last matching case wins. If nothing matches, lz4 will be used. - ->
            <case>

                <!- - Conditions. All must be satisfied. Some conditions may be omitted. - ->
                <min_part_size>10000000000</min_part_size>        <!- - Min part size in bytes. - ->
                <min_part_size_ratio>0.01</min_part_size_ratio>   <!- - Min size of part relative to whole table size. - ->

                <!- - What compression method to use. - ->
                <method>zstd</method>
            </case>
        </compression>
        -->

        <!-- Allow to execute distributed DDL queries (CREATE, DROP, ALTER, RENAME) on cluster.
             Works only if ZooKeeper is enabled. Comment it if such functionality isn't required. -->
        <distributed_ddl>
            <!-- Path in ZooKeeper to queue with DDL queries -->
            <path>/clickhouse/task_queue/ddl</path>

            <!-- Settings from this profile will be used to execute DDL queries -->
            <!-- <profile>default</profile> -->

            <!-- Controls how much ON CLUSTER queries can be run simultaneously. -->
            <!-- <pool_size>1</pool_size> -->

            <!--
                 Cleanup settings (active tasks will not be removed)
            -->

            <!-- Controls task TTL (default 1 week) -->
            <!-- <task_max_lifetime>604800</task_max_lifetime> -->

            <!-- Controls how often cleanup should be performed (in seconds) -->
            <!-- <cleanup_delay_period>60</cleanup_delay_period> -->

            <!-- Controls how many tasks could be in the queue -->
            <!-- <max_tasks_in_queue>1000</max_tasks_in_queue> -->
        </distributed_ddl>

        <!-- Settings to fine tune MergeTree tables. See documentation in source code, in MergeTreeSettings.h -->
        <merge_tree>
            <max_suspicious_broken_parts>1000</max_suspicious_broken_parts>
        </merge_tree>

        <!-- Protection from accidental DROP.
             If size of a MergeTree table is greater than max_table_size_to_drop (in bytes) than table could not be dropped with any DROP query.
             If you want do delete one table and don't want to change clickhouse-server config, you could create special file <clickhouse-path>/flags/force_drop_table and make DROP once.
             By default max_table_size_to_drop is 50GB; max_table_size_to_drop=0 allows to DROP any tables.
             The same for max_partition_size_to_drop.
             Uncomment to disable protection.
        -->
        <max_table_size_to_drop>0</max_table_size_to_drop>
        <max_partition_size_to_drop>0</max_partition_size_to_drop>

        <!-- Example of parameters for GraphiteMergeTree table engine -->
        <graphite_rollup_example>
            <pattern>
                <regexp>click_cost</regexp>
                <function>any</function>
                <retention>
                    <age>0</age>
                    <precision>3600</precision>
                </retention>
                <retention>
                    <age>86400</age>
                    <precision>60</precision>
                </retention>
            </pattern>
            <default>
                <function>max</function>
                <retention>
                    <age>0</age>
                    <precision>60</precision>
                </retention>
                <retention>
                    <age>3600</age>
                    <precision>300</precision>
                </retention>
                <retention>
                    <age>86400</age>
                    <precision>3600</precision>
                </retention>
            </default>
        </graphite_rollup_example>

        <!-- Directory in <clickhouse-path> containing schema files for various input formats.
             The directory will be created if it doesn't exist.
          -->
        <format_schema_path>/var/lib/clickhouse/format_schemas/</format_schema_path>

        <!-- Default query masking rules, matching lines would be replaced with something else in the logs
            (both text logs and system.query_log).
            name - name for the rule (optional)
            regexp - RE2 compatible regular expression (mandatory)
            replace - substitution string for sensitive data (optional, by default - six asterisks)
        -->
        <query_masking_rules>
            <rule>
                <name>hide encrypt/decrypt arguments</name>
                <regexp>((?:aes_)?(?:encrypt|decrypt)(?:_mysql)?)\s*\(\s*(?:'(?:\\'|.)+'|.*?)\s*\)</regexp>
                <!-- or more secure, but also more invasive:
                    (aes_\w+)\s*\(.*\)
                -->
                <replace>\1(???)</replace>
            </rule>
        </query_masking_rules>

        <!-- Uncomment to use custom http handlers.
            rules are checked from top to bottom, first match runs the handler
                url - to match request URL, you can use 'regex:' prefix to use regex match(optional)
                methods - to match request method, you can use commas to separate multiple method matches(optional)
                headers - to match request headers, match each child element(child element name is header name), you can use 'regex:' prefix to use regex match(optional)
            handler is request handler
                type - supported types: static, dynamic_query_handler, predefined_query_handler
                query - use with predefined_query_handler type, executes query when the handler is called
                query_param_name - use with dynamic_query_handler type, extracts and executes the value corresponding to the <query_param_name> value in HTTP request params
                status - use with static type, response status code
                content_type - use with static type, response content-type
                response_content - use with static type, Response content sent to client, when using the prefix 'file://' or 'config://', find the content from the file or configuration send to client.

        <http_handlers>
            <rule>
                <url>/</url>
                <methods>POST,GET</methods>
                <headers><pragma>no-cache</pragma></headers>
                <handler>
                    <type>dynamic_query_handler</type>
                    <query_param_name>query</query_param_name>
                </handler>
            </rule>

            <rule>
                <url>/predefined_query</url>
                <methods>POST,GET</methods>
                <handler>
                    <type>predefined_query_handler</type>
                    <query>SELECT * FROM system.settings</query>
                </handler>
            </rule>

            <rule>
                <handler>
                    <type>static</type>
                    <status>200</status>
                    <content_type>text/plain; charset=UTF-8</content_type>
                    <response_content>config://http_server_default_response</response_content>
                </handler>
            </rule>
        </http_handlers>
        -->

        <send_crash_reports>
            <!-- Changing <enabled> to true allows sending crash reports to -->
            <!-- the ClickHouse core developers team via Sentry https://sentry.io -->
            <!-- Doing so at least in pre-production environments is highly appreciated -->
            <enabled>false</enabled>
            <!-- Change <anonymize> to true if you don't feel comfortable attaching the server hostname to the crash report -->
            <anonymize>false</anonymize>
            <!-- Default endpoint should be changed to different Sentry DSN only if you have -->
            <!-- some in-house engineers or hired consultants who're going to debug ClickHouse issues for you -->
            <endpoint>https://6f33034cfe684dd7a3ab9875e57b1c8d@o388870.ingest.sentry.io/5226277</endpoint>
        </send_crash_reports>

        <!-- Uncomment to disable ClickHouse internal DNS caching. -->
        <!-- <disable_internal_dns_cache>1</disable_internal_dns_cache> -->
    </yandex>
  users.xml: |-
    <?xml version="1.0"?>
    <yandex>
        <!-- Profiles of settings. -->
        <profiles>
            <!-- Default settings. -->
            <default>
                <!-- Maximum memory usage for processing single query, in bytes. -->
                <max_memory_usage>10000000000</max_memory_usage>

                <!-- How to choose between replicas during distributed query processing.
                     random - choose random replica from set of replicas with minimum number of errors
                     nearest_hostname - from set of replicas with minimum number of errors, choose replica
                      with minimum number of different symbols between replica's hostname and local hostname
                      (Hamming distance).
                     in_order - first live replica is chosen in specified order.
                     first_or_random - if first replica one has higher number of errors, pick a random one from replicas with minimum number of errors.
                -->
                <load_balancing>random</load_balancing>
                <max_query_size>10737418240</max_query_size>
                <max_ast_elements>2000000</max_ast_elements>
                <max_expanded_ast_elements>2000000</max_expanded_ast_elements>
                <connect_timeout_with_failover_ms>500</connect_timeout_with_failover_ms>
                <background_pool_size>32</background_pool_size>
                <hedged_connection_timeout_ms>500</hedged_connection_timeout_ms>
                <max_distributed_connections>2048</max_distributed_connections>
                <distributed_connections_pool_size>2048</distributed_connections_pool_size>
                <connections_with_failover_max_tries>10</connections_with_failover_max_tries>
                <skip_unavailable_shards>1</skip_unavailable_shards>
                <allow_experimental_live_view>1</allow_experimental_live_view>
            </default>

            <!-- Profile that allows only read queries. -->
            <readonly>
                <readonly>1</readonly>
            </readonly>
        </profiles>

        <!-- Users and ACL. -->
        <users>
            <!-- If user name was not specified, 'default' user is used. -->
            <default>
                <!-- Password could be specified in plaintext or in SHA256 (in hex format).

                     If you want to specify password in plaintext (not recommended), place it in 'password' element.
                     Example: <password>qwerty</password>.
                     Password could be empty.

                     If you want to specify SHA256, place it in 'password_sha256_hex' element.
                     Example: <password_sha256_hex>65e84be33532fb784c48129675f9eff3a682b27168c0ea744b2cf58ee02337c5</password_sha256_hex>
                     Restrictions of SHA256: impossibility to connect to ClickHouse using MySQL JS client (as of July 2019).

                     If you want to specify double SHA1, place it in 'password_double_sha1_hex' element.
                     Example: <password_double_sha1_hex>e395796d6546b1b65db9d665cd43f0e858dd4303</password_double_sha1_hex>

                     If you want to specify a previously defined LDAP server (see 'ldap_servers' in main config) for authentication, place its name in 'server' element inside 'ldap' element.
                     Example: <ldap><server>my_ldap_server</server></ldap>

                     How to generate decent password:
                     Execute: PASSWORD=$(base64 < /dev/urandom | head -c8); echo "$PASSWORD"; echo -n "$PASSWORD" | sha256sum | tr -d '-'
                     In first line will be password and in second - corresponding SHA256.

                     How to generate double SHA1:
                     Execute: PASSWORD=$(base64 < /dev/urandom | head -c8); echo "$PASSWORD"; echo -n "$PASSWORD" | sha1sum | tr -d '-' | xxd -r -p | sha1sum | tr -d '-'
                     In first line will be password and in second - corresponding double SHA1.
                -->
                <password></password>

                <!-- List of networks with open access.

                     To open access from everywhere, specify:
                        <ip>::/0</ip>

                     To open access only from localhost, specify:
                        <ip>::1</ip>
                        <ip>127.0.0.1</ip>

                     Each element of list has one of the following forms:
                     <ip> IP-address or network mask. Examples: 213.180.204.3 or 10.0.0.1/8 or 10.0.0.1/255.255.255.0
                         2a02:6b8::3 or 2a02:6b8::3/64 or 2a02:6b8::3/ffff:ffff:ffff:ffff::.
                     <host> Hostname. Example: server01.yandex.ru.
                         To check access, DNS query is performed, and all received addresses compared to peer address.
                     <host_regexp> Regular expression for host names. Example, ^server\d\d-\d\d-\d\.yandex\.ru$
                         To check access, DNS PTR query is performed for peer address and then regexp is applied.
                         Then, for result of PTR query, another DNS query is performed and all received addresses compared to peer address.
                         Strongly recommended that regexp is ends with $
                     All results of DNS requests are cached till server restart.
                -->
                <networks>
                    <ip>::/0</ip>
                </networks>

                <!-- Settings profile for user. -->
                <profile>default</profile>

                <!-- Quota for user. -->
                <quota>default</quota>

                <!-- User can create other users and grant rights to them. -->
                <!-- <access_management>1</access_management> -->
            </default>
        </users>

        <!-- Quotas. -->
        <quotas>
            <!-- Name of quota. -->
            <default>
                <!-- Limits for time interval. You could specify many intervals with different limits. -->
                <interval>
                    <!-- Length of interval. -->
                    <duration>3600</duration>

                    <!-- No limits. Just calculate resource usage for time interval. -->
                    <queries>0</queries>
                    <errors>0</errors>
                    <result_rows>0</result_rows>
                    <read_rows>0</read_rows>
                    <execution_time>0</execution_time>
                </interval>
            </default>
        </quotas>
    </yandex>
---
# Source: deepflow/charts/deepflow-agent/templates/configmap.yaml
kind: ConfigMap
apiVersion: v1
metadata:
  name: deepflow-agent
  labels:
    helm.sh/chart: deepflow-agent-6.6.018
    app: deepflow
    component: deepflow-agent
    app.kubernetes.io/name: deepflow-agent
    app.kubernetes.io/instance: deepflow
    app.kubernetes.io/version: "6.6"
    app.kubernetes.io/managed-by: Helm
data:
  deepflow-agent.yaml: |
      controller-ips:
      - 'deepflow-server'
---
# Source: deepflow/charts/grafana/templates/configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: deepflow-grafana
  namespace: deepflow
  labels:
    helm.sh/chart: grafana-7.3.12
    app.kubernetes.io/name: grafana
    app.kubernetes.io/instance: deepflow
    app.kubernetes.io/version: "10.4.3"
    app.kubernetes.io/managed-by: Helm
data:
  
  grafana.ini: |
    [analytics]
    check_for_updates = true
    [database]
    host = deepflow-mysql:30130
    name = grafana
    password = deepflow
    type = mysql
    user = root
    [grafana_net]
    url = https://grafana.net
    [log]
    mode = console
    [paths]
    data = /var/lib/grafana/
    logs = /var/log/grafana
    plugins = /var/lib/grafana/plugins
    provisioning = /etc/grafana/provisioning
    [plugins]
    allow_loading_unsigned_plugins = deepflow-querier-datasource,deepflow-apptracing-panel,deepflow-topo-panel,deepflowio-tracing-panel,deepflowio-deepflow-datasource,deepflowio-topo-panel
    [server]
    domain = ''
---
# Source: deepflow/charts/mysql/templates/configmap.yaml
kind: ConfigMap
apiVersion: v1
metadata:
  name: deepflow-mysql
  labels:
    helm.sh/chart: mysql-0.1.000
    app: deepflow
    component: mysql
    app.kubernetes.io/name: mysql
    app.kubernetes.io/instance: deepflow
    app.kubernetes.io/version: "8.0.26"
    app.kubernetes.io/managed-by: Helm
data:
  my.cnf: |-
    [client]
    default-character-set=utf8

    [mysqld]
    default-authentication-plugin=mysql_native_password

    # Network related
    bind-address=*
    port=30130

    # Enable query cache
    innodb_buffer_pool_size=20M
    max_connections=1000
    wait_timeout=60

    # Replication related
    slave_skip_errors=all

    ## Binlog expiration time, default 1 days
    binlog_expire_logs_seconds = 86400
  init.sql: |-
    ALTER USER 'root'@'localhost' IDENTIFIED WITH mysql_native_password BY 'deepflow';
    CREATE USER IF NOT EXISTS 'root'@'%' IDENTIFIED WITH mysql_native_password BY 'deepflow';
    GRANT ALL ON *.* TO 'root'@'%' WITH GRANT OPTION;
    CREATE USER IF NOT EXISTS 'grafana'@'%' IDENTIFIED WITH mysql_native_password BY 'deepflow';
    GRANT ALL ON *.* TO 'grafana'@'%' WITH GRANT OPTION;
---
# Source: deepflow/charts/stella-agent-ce/templates/configmap.yaml
kind: ConfigMap
apiVersion: v1
metadata:
  name: deepflow-stella-agent-ce
  labels:
    helm.sh/chart: stella-agent-ce-6.5.001
    app: deepflow
    component: stella-agent-ce
    app.kubernetes.io/name: stella-agent-ce
    app.kubernetes.io/instance: deepflow
    app.kubernetes.io/version: "6.5.0"
    app.kubernetes.io/managed-by: Helm
data:
  df-llm-agent.yaml: |
    api_timeout: 500
    daemon: true
    instance_path: /root/df-llm-agent
    log_file: /var/log/df-llm-agent.log
    log_level: info
    sql_show: false
    mysql:
      database: deepflow_llm
      host: deepflow-mysql
      port: 30130
      user_name: root
      user_password: deepflow
---
# Source: deepflow/templates/configmap.yaml
kind: ConfigMap
apiVersion: v1
metadata:
  name: deepflow
  labels:
    helm.sh/chart: deepflow-6.6.018
    app: deepflow
    app.kubernetes.io/name: deepflow
    app.kubernetes.io/instance: deepflow
    app.kubernetes.io/version: "6.6"
    app.kubernetes.io/managed-by: Helm
data:
  server.yaml: |
    log-file: /var/log/deepflow/server.log
    log-level: info
    controller:
      election-name: deepflow-server
      election-namespace: deepflow
      grpc-max-message-length: 104857600
      grpc-port: 20035
      kubeconfig:
      listen-port: 20417
      clickhouse:
        database: flow_tag
        endpoint-tcp-port-name: tcp-port
        host: deepflow-clickhouse
        port: 9000
        user-name: default
        user-password:
      mysql:
        database: deepflow
        host: deepflow-mysql
        port: 30130
        timeout: 30
        user-name: root
        user-password: deepflow
      trisolaris:
        trident-type-for-unknow-vtap: 3
        chrony:
          host: ntp.aliyun.com
          port: 123
          timeout: 1
    ingester:
      es-syslog: false
      ckdb:
        cluster-name:
        endpoint-tcp-port-name: tcp-port
        external: false
        host: deepflow-clickhouse
        port: 9000
        storage-policy:
        type: clickhouse
      ckdb-auth:
        password:
        username: default
    querier:
      listen-port: 20416
      clickhouse:
        database: flow_tag
        host: deepflow-clickhouse
        port: 9000
        timeout: 60
        user-name: default
        user-password:
      deepflow-app:
        host: deepflow-app
        port: 20418
  app.yaml: |
    app:
      http_request_timeout: 600
      http_response_timeout: 600
      listen-port: 20418
      log-file: /var/log/deepflow/app.log
      log-level: info
      controller:
        host: deepflow-server
        port: 20417
        timeout: 60
      querier:
        host: deepflow-server
        port: 20416
        timeout: 60
      spec:
        l7_tracing_limit: 100
---
# Source: deepflow/charts/mysql/templates/pvc.yaml
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: deepflow-mysql-data-pvc
  labels:
    helm.sh/chart: mysql-0.1.000
    app: deepflow
    component: mysql
    app.kubernetes.io/name: mysql
    app.kubernetes.io/instance: deepflow
    app.kubernetes.io/version: "8.0.26"
    app.kubernetes.io/managed-by: Helm
  annotations:
    helm.sh/resource-policy: keep
spec:
  accessModes:
  - "ReadWriteOnce"
  resources:
    requests:
      storage: "100Gi"
---
# Source: deepflow/charts/deepflow-agent/templates/RBAC.yaml
kind: ClusterRole
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: deepflow-agent
  namespace: deepflow
rules:
- apiGroups: [""]
  resources:
  - nodes
  - namespaces
  - configmaps
  - services
  - pods
  - replicationcontrollers
  verbs: ["get", "list", "watch"]
- apiGroups: ["apps"]
  resources:
  - daemonsets
  - deployments
  - replicasets
  - statefulsets
  verbs: ["get", "list", "watch"]
- apiGroups: ["extensions", "networking.k8s.io"]
  resources: ["ingresses"]
  verbs: ["get", "list", "watch"]
- apiGroups: ["route.openshift.io"]
  resources: ["routes"]
  verbs: ["get", "list", "watch"]
---
# Source: deepflow/charts/deepflow-agent/templates/RBAC.yaml
kind: ClusterRoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: deepflow-agent
subjects:
- kind: ServiceAccount
  name: deepflow-agent
  namespace: deepflow
  apiGroup: ""
roleRef:
  kind: ClusterRole
  name: deepflow-agent
  apiGroup: ""
---
# Source: deepflow/charts/deepflow-agent/templates/RBAC.yaml
### DeepFlow Agent remote update is used only to update DeepFlow-Agent's daemonset and configmap
kind: Role
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: deepflow-agent-update
  namespace: deepflow
rules:
- apiGroups: [""]
  resources:
  - configmaps
  resourceNames: ['deepflow-agent-config']
  verbs: ["get", "list", "watch", "update", "patch"]
- apiGroups: ["apps"]
  resources:
  - daemonsets
  resourceNames: ['deepflow-agent']
  verbs: ["get", "list", "watch", "update", "patch"]
---
# Source: deepflow/charts/grafana/templates/role.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: deepflow-grafana
  namespace: deepflow
  labels:
    helm.sh/chart: grafana-7.3.12
    app.kubernetes.io/name: grafana
    app.kubernetes.io/instance: deepflow
    app.kubernetes.io/version: "10.4.3"
    app.kubernetes.io/managed-by: Helm
rules: []
---
# Source: deepflow/templates/RBAC.yaml
kind: Role
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: deepflow-server
  namespace: deepflow
rules:
  - apiGroups:
    - ""
    resources:
      - endpoints
      - services
    verbs:
      - list
      - get
      - watch
      - create
      - update
  - apiGroups:
    - ""
    resources:
    - pods
    verbs:
      - list
      - get
      - watch
  - apiGroups:
      - coordination.k8s.io
    resources:
      - leases
    verbs:
      - '*'
---
# Source: deepflow/charts/deepflow-agent/templates/RBAC.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: deepflow-agent-update
  namespace: deepflow
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: deepflow-agent-update
subjects:
- kind: ServiceAccount
  name: deepflow-agent
  apiGroup: ""
---
# Source: deepflow/charts/grafana/templates/rolebinding.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: deepflow-grafana
  namespace: deepflow
  labels:
    helm.sh/chart: grafana-7.3.12
    app.kubernetes.io/name: grafana
    app.kubernetes.io/instance: deepflow
    app.kubernetes.io/version: "10.4.3"
    app.kubernetes.io/managed-by: Helm
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: deepflow-grafana
subjects:
- kind: ServiceAccount
  name: deepflow-grafana
  namespace: deepflow
---
# Source: deepflow/templates/RBAC.yaml
kind: RoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: deepflow-server
subjects:
- kind: ServiceAccount
  name: deepflow-server
  namespace: deepflow
  apiGroup: ""
roleRef:
  kind: Role
  name: deepflow-server
  apiGroup: ""
---
# Source: deepflow/charts/clickhouse/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: deepflow-clickhouse
  labels:
    helm.sh/chart: clickhouse-0.1.000
    app: deepflow
    component: clickhouse
    app.kubernetes.io/name: clickhouse
    app.kubernetes.io/instance: deepflow
    app.kubernetes.io/version: "21.8.15.7"
    app.kubernetes.io/managed-by: Helm
spec:
  ports:
  - name: http-port
    port: 8123
    targetPort: 8123
    protocol: TCP
  - name: tcp-port
    port: 9000
    targetPort: 9000
    protocol: TCP
  - name: interserver-http-port
    port: 9009
    targetPort: 9009
    protocol: TCP
  selector:
    app: deepflow
    component: clickhouse
    app.kubernetes.io/name: clickhouse
    app.kubernetes.io/instance: deepflow
  type: "ClusterIP"
---
# Source: deepflow/charts/clickhouse/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: deepflow-clickhouse-headless
  labels:
    helm.sh/chart: clickhouse-0.1.000
    app: deepflow
    component: clickhouse
    app.kubernetes.io/name: clickhouse
    app.kubernetes.io/instance: deepflow
    app.kubernetes.io/version: "21.8.15.7"
    app.kubernetes.io/managed-by: Helm
spec:
  clusterIP: None
  ports:
  - name: http-port
    port: 8123
    targetPort: 8123
    protocol: TCP
  - name: tcp-port
    port: 9000
    targetPort: 9000
    protocol: TCP
  - name: interserver-http-port
    port: 9009
    targetPort: 9009
    protocol: TCP
  selector:
    app: deepflow
    component: clickhouse
    app.kubernetes.io/name: clickhouse
    app.kubernetes.io/instance: deepflow
  type: ClusterIP
---
# Source: deepflow/charts/deepflow-agent/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: deepflow-agent
  labels:
    helm.sh/chart: deepflow-agent-6.6.018
    app: deepflow
    component: deepflow-agent
    app.kubernetes.io/name: deepflow-agent
    app.kubernetes.io/instance: deepflow
    app.kubernetes.io/version: "6.6"
    app.kubernetes.io/managed-by: Helm
spec:
  ports:
  - name: receive
    port: 80
    targetPort: receive
    protocol: TCP
  selector:
    app: deepflow
    component: deepflow-agent
    app.kubernetes.io/name: deepflow-agent
    app.kubernetes.io/instance: deepflow
  type: "ClusterIP"
---
# Source: deepflow/charts/grafana/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: deepflow-grafana
  namespace: deepflow
  labels:
    helm.sh/chart: grafana-7.3.12
    app.kubernetes.io/name: grafana
    app.kubernetes.io/instance: deepflow
    app.kubernetes.io/version: "10.4.3"
    app.kubernetes.io/managed-by: Helm
spec:
  type: NodePort
  ports:
    - name: service
      port: 80
      protocol: TCP
      targetPort: 3000
  selector:
    app.kubernetes.io/name: grafana
    app.kubernetes.io/instance: deepflow
---
# Source: deepflow/charts/mysql/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: deepflow-mysql
  labels:
    helm.sh/chart: mysql-0.1.000
    app: deepflow
    component: mysql
    app.kubernetes.io/name: mysql
    app.kubernetes.io/instance: deepflow
    app.kubernetes.io/version: "8.0.26"
    app.kubernetes.io/managed-by: Helm
spec:
  ports:
  - name: tcp
    port: 30130
    targetPort: 30130
    protocol: TCP
  selector:
    app: deepflow
    component: mysql
    app.kubernetes.io/name: mysql
    app.kubernetes.io/instance: deepflow
  type: "ClusterIP"
---
# Source: deepflow/charts/stella-agent-ce/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: deepflow-stella-agent-ce
  labels:
    helm.sh/chart: stella-agent-ce-6.5.001
    app: deepflow
    component: stella-agent-ce
    app.kubernetes.io/name: stella-agent-ce
    app.kubernetes.io/instance: deepflow
    app.kubernetes.io/version: "6.5.0"
    app.kubernetes.io/managed-by: Helm
spec:
  ports:
  - name: tcp
    port: 20831
    targetPort: 20831
    protocol: TCP
  selector:
    app: deepflow
    component: stella-agent-ce
    app.kubernetes.io/name: stella-agent-ce
    app.kubernetes.io/instance: deepflow
  type: "ClusterIP"
---
# Source: deepflow/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: deepflow-server
  labels:
    helm.sh/chart: deepflow-6.6.018
    app: deepflow
    app.kubernetes.io/name: deepflow
    app.kubernetes.io/instance: deepflow
    app.kubernetes.io/version: "6.6"
    app.kubernetes.io/managed-by: Helm
spec:
  externalTrafficPolicy: Cluster
  ports:
  - name: querier
    port: 20416
    targetPort: 20416
    protocol: TCP
  - name: profile
    port: 20419
    targetPort: 20419
    protocol: TCP
  - name: health-check
    port: 20417
    targetPort: 20417
    nodePort: 30417
    protocol: TCP
  - name: grpc
    port: 20035
    targetPort: 20035
    protocol: TCP
  - name: grpc-30035
    port: 30035
    targetPort: 20035
    nodePort: 30035
    protocol: TCP
  - name: ssl-grpc
    port: 20135
    targetPort: 20135
    protocol: TCP
  - name: ingester
    port: 20033
    targetPort: 20033
    protocol: TCP
  - name: ingester-30033
    port: 30033
    targetPort: 20033
    nodePort: 30033
    protocol: TCP
  selector:
    app: deepflow
    component: deepflow-server
    app.kubernetes.io/name: deepflow
    app.kubernetes.io/instance: deepflow
  type: "NodePort"
---
# Source: deepflow/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: deepflow-app
  labels:
    helm.sh/chart: deepflow-6.6.018
    app: deepflow
    component: deepflow-app
    app.kubernetes.io/name: deepflow
    app.kubernetes.io/instance: deepflow
    app.kubernetes.io/version: "6.6"
    app.kubernetes.io/managed-by: Helm
spec:
  ports:
  - name: app
    port: 20418
    targetPort: 20418
    protocol: TCP
  selector:
    app: deepflow
    component: deepflow-app
    app.kubernetes.io/name: deepflow
    app.kubernetes.io/instance: deepflow
  type: "ClusterIP"
---
# Source: deepflow/charts/deepflow-agent/templates/daemonset.yaml
apiVersion: apps/v1
kind: DaemonSet
metadata:
  name: deepflow-agent
  labels:
    helm.sh/chart: deepflow-agent-6.6.018
    app: deepflow
    component: deepflow-agent
    app.kubernetes.io/name: deepflow-agent
    app.kubernetes.io/instance: deepflow
    app.kubernetes.io/version: "6.6"
    app.kubernetes.io/managed-by: Helm
spec:
  selector:
    matchLabels:
      app: deepflow
      component: deepflow-agent
      app.kubernetes.io/name: deepflow-agent
      app.kubernetes.io/instance: deepflow
  template:
    metadata:
      annotations:
        checksum/config: 11a8330df61d076b1bd7109eb66ed5912dfc718cd0bd24d5260524b9263a3213
        checksum/customConfig: b2953517f7e42865a24a10d84c5804af55e959f126ad6b2f5db91042a38d4961
        container.apparmor.security.beta.kubernetes.io/deepflow-agent: unconfined
      labels:
        app: deepflow
        component: deepflow-agent
        app.kubernetes.io/name: deepflow-agent
        app.kubernetes.io/instance: deepflow
    spec:
      dnsPolicy: ClusterFirst
      hostNetwork: false
      hostPID: true
      imagePullSecrets:
      serviceAccountName: deepflow-agent
      securityContext:
        {}
      initContainers:
      - name: configure-sysctl
        securityContext:
          runAsUser: 0
          privileged: true
        image: "registry.cn-beijing.aliyuncs.com/deepflow-ce/deepflow-agent:v6.6"
        imagePullPolicy: Always
        command: ["/bin/bash", "-c", "sysctl -w net.core.bpf_jit_enable=1 || true"]
      containers:
        - name: deepflow-agent
          securityContext:
            capabilities:
              add:
              - SYS_ADMIN
              - SYS_RESOURCE
              - SYS_PTRACE
              - NET_ADMIN
              - NET_RAW
              - IPC_LOCK
              - SYSLOG
          image: "registry.cn-beijing.aliyuncs.com/deepflow-ce/deepflow-agent:v6.6"
          imagePullPolicy: Always
          ports:
            - name: receive
              containerPort: 38086
              protocol: TCP
          # livenessProbe:
          #   tcpSocket:
          #     port: otel
          #   initialDelaySeconds: 5
          #   periodSeconds: 10
          # readinessProbe:
          #   tcpSocket:
          #     port: otel
          #   initialDelaySeconds: 5
          #   periodSeconds: 10
          env:
          - name: TZ
            value: Asia/Shanghai
          - name: K8S_NAMESPACE_FOR_DEEPFLOW
            valueFrom:
              fieldRef:
                fieldPath: metadata.namespace
          - name: K8S_NODE_IP_FOR_DEEPFLOW
            valueFrom:
              fieldRef:
                fieldPath: status.hostIP
          - name: K8S_NODE_NAME_FOR_DEEPFLOW
            valueFrom:
              fieldRef:
                fieldPath: spec.nodeName
          - name: K8S_POD_NAME_FOR_DEEPFLOW
            valueFrom:
              fieldRef:
                fieldPath: metadata.name
          - name: K8S_POD_IP_FOR_DEEPFLOW
            valueFrom:
              fieldRef:
                fieldPath: status.podIP
          resources:
            limits:
              cpu: 1000m
              memory: 768Mi
            requests:
              cpu: 100m
              memory: 128Mi
          volumeMounts:
            - name: sys-kernel-debug
              mountPath: /sys/kernel/debug
              readOnly: true
            - name: deepflow-agent-conf
              mountPath: /etc/deepflow-agent
      volumes:
        - name: sys-kernel-debug
          hostPath:
            path: /sys/kernel/debug
        - name: deepflow-agent-conf
          configMap:
            name: deepflow-agent
      affinity:      
        nodeAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
          preferredDuringSchedulingIgnoredDuringExecution:
---
# Source: deepflow/charts/grafana/templates/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: deepflow-grafana
  namespace: deepflow
  labels:
    helm.sh/chart: grafana-7.3.12
    app.kubernetes.io/name: grafana
    app.kubernetes.io/instance: deepflow
    app.kubernetes.io/version: "10.4.3"
    app.kubernetes.io/managed-by: Helm
spec:
  replicas: 1
  revisionHistoryLimit: 10
  selector:
    matchLabels:
      app.kubernetes.io/name: grafana
      app.kubernetes.io/instance: deepflow
  strategy:
    type: RollingUpdate
  template:
    metadata:
      labels:
        app.kubernetes.io/name: grafana
        app.kubernetes.io/instance: deepflow
      annotations:
        checksum/config: 8f2bfadd2b8dbde0e29008f8254dec5b2df0bb9a5b57875a433ecd7fcc1852b3
        checksum/sc-dashboard-provider-config: 593c0a8778b83f11fe80ccb21dfb20bc46705e2be3178df1dc4c89d164c8cd9c
        checksum/secret: 6c43b38c650b8220481a53e61bbbf8758791453a994aaa91a78f1f2b5e2e6ebf
        kubectl.kubernetes.io/default-container: grafana
    spec:
      
      serviceAccountName: deepflow-grafana
      automountServiceAccountToken: true
      securityContext:
        fsGroup: 472
        runAsGroup: 472
        runAsNonRoot: true
        runAsUser: 472
      initContainers:
        - image: 'registry.cn-beijing.aliyuncs.com/deepflow-ce/deepflowio-init-grafana:v6.6'
          imagePullPolicy: 'Always'
          name: init-custom-plugins
          volumeMounts:
          - mountPath: /var/lib/grafana/plugins
            name: custom-plugins
        - image: 'registry.cn-beijing.aliyuncs.com/deepflow-ce/deepflowio-init-grafana-ds-dh:latest'
          imagePullPolicy: 'Always'
          name: init-grafana-ds-dh
          volumeMounts:
          - mountPath: /tmp/dashboards
            name: deepflow-dashboards
          - mountPath: /etc/grafana/provisioning/dashboards
            name: grafana-dashboards-config
          - mountPath: /etc/grafana/provisioning/datasources
            name: grafana-datasources-config
      enableServiceLinks: true
      containers:
        - name: grafana
          image: "registry.cn-beijing.aliyuncs.com/deepflow-ce/grafana:10.4.3"
          imagePullPolicy: Always
          volumeMounts:
            - name: config
              mountPath: "/etc/grafana/grafana.ini"
              subPath: grafana.ini
            - name: storage
              mountPath: "/var/lib/grafana"
            - name: custom-plugins
              mountPath: /var/lib/grafana/plugins
            - name: deepflow-dashboards
              mountPath: /tmp/dashboards
            - name: grafana-dashboards-config
              mountPath: /etc/grafana/provisioning/dashboards
            - name: grafana-datasources-config
              mountPath: /etc/grafana/provisioning/datasources
          ports:
            - name: grafana
              containerPort: 3000
              protocol: TCP
            - name: gossip-tcp
              containerPort: 9094
              protocol: TCP
            - name: gossip-udp
              containerPort: 9094
              protocol: UDP
          env:
            - name: POD_IP
              valueFrom:
                fieldRef:
                  fieldPath: status.podIP
            - name: GF_SECURITY_ADMIN_USER
              valueFrom:
                secretKeyRef:
                  name: deepflow-grafana
                  key: admin-user
            - name: GF_SECURITY_ADMIN_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: deepflow-grafana
                  key: admin-password
            - name: GF_PATHS_DATA
              value: /var/lib/grafana/
            - name: GF_PATHS_LOGS
              value: /var/log/grafana
            - name: GF_PATHS_PLUGINS
              value: /var/lib/grafana/plugins
            - name: GF_PATHS_PROVISIONING
              value: /etc/grafana/provisioning
            - name: "CLICKHOUSE_PASSWORD"
              value: ""
            - name: "CLICKHOUSE_SERVER"
              value: "deepflow-clickhouse"
            - name: "CLICKHOUSE_USER"
              value: "default"
            - name: "DEEPFLOW_AI_URL"
              value: "http://deepflow-stella-agent-ce:20831"
            - name: "DEEPFLOW_REQUEST_URL"
              value: "http://deepflow-server:20416"
            - name: "DEEPFLOW_TRACEURL"
              value: "http://deepflow-app:20418"
            - name: "MYSQL_PASSWORD"
              value: "deepflow"
            - name: "MYSQL_URL"
              value: "deepflow-mysql:30130"
            - name: "MYSQL_USER"
              value: "root"
            - name: "TZ"
              value: "Asia/Shanghai"
          livenessProbe:
            failureThreshold: 10
            httpGet:
              path: /api/health
              port: 3000
            initialDelaySeconds: 60
            timeoutSeconds: 30
          readinessProbe:
            httpGet:
              path: /api/health
              port: 3000
      volumes:
        - name: config
          configMap:
            name: deepflow-grafana
        - name: storage
          emptyDir: {}
        - name: custom-plugins
          emptyDir: {}
        - name: deepflow-dashboards
          emptyDir: {}
        - name: grafana-dashboards-config
          emptyDir: {}
        - name: grafana-datasources-config
          emptyDir: {}
---
# Source: deepflow/charts/mysql/templates/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: deepflow-mysql
  labels:
    helm.sh/chart: mysql-0.1.000
    app: deepflow
    component: mysql
    app.kubernetes.io/name: mysql
    app.kubernetes.io/instance: deepflow
    app.kubernetes.io/version: "8.0.26"
    app.kubernetes.io/managed-by: Helm
spec:
  replicas: 1
  strategy:
    type: Recreate
  selector:
    matchLabels:
      app: deepflow
      component: mysql
      app.kubernetes.io/name: mysql
      app.kubernetes.io/instance: deepflow
  template:
    metadata:
      annotations:
        checksum/config: 278c9bc144248a949f6208b8f8daef003b3fb4529b22ba0882f5751876283457
      labels:
        app: deepflow
        component: mysql
        app.kubernetes.io/name: mysql
        app.kubernetes.io/instance: deepflow
    spec:
      hostNetwork: false
      dnsPolicy: ClusterFirst
      imagePullSecrets:
      securityContext:
        {}
      containers:
        - name: mysql
          securityContext:
            null
          image: "registry.cn-beijing.aliyuncs.com/deepflow-ce/mysql:8.0.31"
          imagePullPolicy: Always
          ports:
            - name: tcp
              containerPort: 30130
              protocol: TCP
          livenessProbe:
            
            failureThreshold: 6
            initialDelaySeconds: 15
            periodSeconds: 20
            successThreshold: 1
            tcpSocket:
              port: tcp
            timeoutSeconds: 1
          readinessProbe:
            
            failureThreshold: 6
            initialDelaySeconds: 15
            periodSeconds: 10
            successThreshold: 1
            tcpSocket:
              port: tcp
          resources:
            {}
          env:
            - name: MYSQL_ROOT_PASSWORD
              value: deepflow
            - name: MYSQL_DATABASE
              value: grafana
            - name: TZ
              value: "Asia/Shanghai"
          volumeMounts:
          - name: mysql-config
            mountPath: /etc/my.cnf
            subPath: my.cnf
          - name: mysql-config-init-sql
            mountPath: /docker-entrypoint-initdb.d/init.sql
            subPath: init.sql
          - mountPath: /var/lib/mysql
            name: data-path
      volumes:
        - name: mysql-config
          configMap:
            name: deepflow-mysql
            items:
            - key: my.cnf
              path: my.cnf
        - name: mysql-config-init-sql
          configMap:
            name: deepflow-mysql
            items:
            - key: init.sql
              path: init.sql
        - name: data-path
          persistentVolumeClaim:
            claimName: deepflow-mysql-data-pvc
      affinity:      
        nodeAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
          preferredDuringSchedulingIgnoredDuringExecution:
---
# Source: deepflow/charts/stella-agent-ce/templates/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: deepflow-stella-agent-ce
  labels:
    helm.sh/chart: stella-agent-ce-6.5.001
    app: deepflow
    component: stella-agent-ce
    app.kubernetes.io/name: stella-agent-ce
    app.kubernetes.io/instance: deepflow
    app.kubernetes.io/version: "6.5.0"
    app.kubernetes.io/managed-by: Helm
spec:
  replicas: 1
  selector:
    matchLabels:
      app: deepflow
      component: stella-agent-ce
      app.kubernetes.io/name: stella-agent-ce
      app.kubernetes.io/instance: deepflow
  template:
    metadata:
      annotations:
        checksum/config: 7c80fdbcbfcf697ea7133886d4d05a34ae753263d6562ac58263a9179a09f770
      labels:
        app: deepflow
        component: stella-agent-ce
        app.kubernetes.io/name: stella-agent-ce
        app.kubernetes.io/instance: deepflow
    spec:
      hostNetwork: false
      dnsPolicy: ClusterFirst
      imagePullSecrets:
      securityContext:
        {}
      containers:
        - name: stella-agent-ce
          securityContext:
            null
          image: "registry.cn-beijing.aliyuncs.com/deepflow-ce/deepflowio-stella-agent-ce:latest"
          imagePullPolicy: Always
          ports:
            - name: http
              containerPort: 20831
              protocol: TCP
          livenessProbe:
            
            failureThreshold: 6
            httpGet:
              path: /v1/health/
              port: http
            initialDelaySeconds: 15
            periodSeconds: 20
            successThreshold: 1
            timeoutSeconds: 1
          readinessProbe:
            
            failureThreshold: 10
            httpGet:
              path: /v1/health/
              port: http
            initialDelaySeconds: 15
            periodSeconds: 10
            successThreshold: 1
          resources:
            {}
          volumeMounts:
            - name: config
              mountPath: /etc/web/df-llm-agent.yaml
              subPath: df-llm-agent.yaml
      volumes:
        - name: config
          configMap:
            name: deepflow-stella-agent-ce
            items:
            - key: df-llm-agent.yaml
              path: df-llm-agent.yaml
      affinity:      
        nodeAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
          preferredDuringSchedulingIgnoredDuringExecution:
---
# Source: deepflow/templates/app-deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: deepflow-app
  labels:
    helm.sh/chart: deepflow-6.6.018
    app: deepflow
    component: deepflow-app
    app.kubernetes.io/name: deepflow
    app.kubernetes.io/instance: deepflow
    app.kubernetes.io/version: "6.6"
    app.kubernetes.io/managed-by: Helm
spec:
  replicas: 1
  selector:
    matchLabels:
      app: deepflow
      component: deepflow-app
      app.kubernetes.io/name: deepflow
      app.kubernetes.io/instance: deepflow
  template:
    metadata:
      annotations:
        checksum/config: 6af940e942cc5fea8c6327717aab92b2f16661f3d854cfc2f50644e759da98ce
        checksum/customConfig: e95bcb42c5fc5218461f9db490865e4050367d1b8b8699b5eca0c3724b8885fc
      labels:
        app: deepflow
        component: deepflow-app
        app.kubernetes.io/name: deepflow
        app.kubernetes.io/instance: deepflow
    spec:
      hostNetwork: false
      dnsPolicy: ClusterFirst
      imagePullSecrets:
      securityContext:
        {}
      containers:
        - name: deepflow-app
          securityContext:
            {}
          image: "registry.cn-beijing.aliyuncs.com/deepflow-ce/deepflow-app:v6.6"
          imagePullPolicy: "Always"
          ports:
            - name: app
              containerPort: 20418
              protocol: TCP
          livenessProbe:
            
            failureThreshold: 3
            initialDelaySeconds: 15
            periodSeconds: 20
            successThreshold: 1
            tcpSocket:
              port: app
            timeoutSeconds: 1
          readinessProbe:
            
            failureThreshold: 3
            initialDelaySeconds: 15
            periodSeconds: 10
            successThreshold: 1
            tcpSocket:
              port: app
          resources:
            {}
          volumeMounts:
          - name: app-config
            mountPath: /etc/deepflow/app.yaml
            subPath: app.yaml
          env:
          - name: K8S_NODE_IP_FOR_DEEPFLOW
            valueFrom:
              fieldRef:
                fieldPath: status.hostIP
          - name: K8S_NODE_NAME_FOR_DEEPFLOW
            valueFrom:
              fieldRef:
                fieldPath: spec.nodeName
          - name: K8S_POD_NAME_FOR_DEEPFLOW
            valueFrom:
              fieldRef:
                fieldPath: metadata.name
          - name: K8S_POD_IP_FOR_DEEPFLOW
            valueFrom:
              fieldRef:
                fieldPath: status.podIP
          - name: TZ
            value: "Asia/Shanghai"
      volumes:
        - name: app-config
          configMap:
            name: deepflow
            items:
            - key: app.yaml
              path: app.yaml
      affinity:      
        nodeAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
          preferredDuringSchedulingIgnoredDuringExecution:
---
# Source: deepflow/templates/server-deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: deepflow-server
  labels:
    helm.sh/chart: deepflow-6.6.018
    app: deepflow
    app.kubernetes.io/name: deepflow
    app.kubernetes.io/instance: deepflow
    app.kubernetes.io/version: "6.6"
    app.kubernetes.io/managed-by: Helm
spec:
  replicas: 1
  strategy:
    type: Recreate
  selector:
    matchLabels:
      app: deepflow
      component: deepflow-server
      app.kubernetes.io/name: deepflow
      app.kubernetes.io/instance: deepflow
  template:
    metadata:
      annotations:
        checksum/config: "6af940e942cc5fea8c6327717aab92b2f16661f3d854cfc2f50644e759da98ce"
        checksum/customConfig: "e95bcb42c5fc5218461f9db490865e4050367d1b8b8699b5eca0c3724b8885fc"
      labels:
        app: deepflow
        component: deepflow-server
        app.kubernetes.io/name: deepflow
        app.kubernetes.io/instance: deepflow
    spec:
      hostNetwork: false
      dnsPolicy: ClusterFirst
      dnsConfig:
        nameservers:
      imagePullSecrets:
      securityContext:
        {}
      serviceAccountName: deepflow-server
      containers:
        - name: deepflow-server
          securityContext:
            {}
          image: "registry.cn-beijing.aliyuncs.com/deepflow-ce/deepflow-server:v6.6"
          imagePullPolicy: "Always"
          ports:
            - name: server
              containerPort: 20417
              protocol: TCP
            - containerPort: 20035
              name: grpc
              protocol: TCP
            - containerPort: 20135
              name: ssl-grpc
              protocol: TCP
            - containerPort: 20416
              name: querier
              protocol: TCP
          livenessProbe:
            
            failureThreshold: 6
            httpGet:
              path: /v1/health/
              port: server
            initialDelaySeconds: 15
            periodSeconds: 20
            successThreshold: 1
            timeoutSeconds: 1
          readinessProbe:
            
            failureThreshold: 10
            httpGet:
              path: /v1/health/
              port: server
            initialDelaySeconds: 15
            periodSeconds: 10
            successThreshold: 1
          resources:
            {}
          volumeMounts:
          - name: server-config
            mountPath: /etc/server.yaml
            subPath: server.yaml
          env:
          - name: K8S_NODE_IP_FOR_DEEPFLOW
            valueFrom:
              fieldRef:
                fieldPath: status.hostIP
          - name: K8S_NODE_NAME_FOR_DEEPFLOW
            valueFrom:
              fieldRef:
                fieldPath: spec.nodeName
          - name: K8S_POD_NAME_FOR_DEEPFLOW
            valueFrom:
              fieldRef:
                fieldPath: metadata.name
          - name: K8S_POD_IP_FOR_DEEPFLOW
            valueFrom:
              fieldRef:
                fieldPath: status.podIP
          - name: K8S_NAMESPACE_FOR_DEEPFLOW
            valueFrom:
              fieldRef:
                fieldPath: metadata.namespace
          - name: TZ
            value: "Asia/Shanghai"
      volumes:
        - name: server-config
          configMap:
            name: deepflow
            items:
            - key: server.yaml
              path: server.yaml
      affinity:      
        nodeAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
          preferredDuringSchedulingIgnoredDuringExecution:            
        podAntiAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
          - labelSelector:
              matchExpressions:
              - key: app
                operator: In
                values:
                - "deepflow"
              - key: component
                operator: In
                values:
                - "deepflow-server"
            topologyKey: kubernetes.io/hostname
---
# Source: deepflow/charts/clickhouse/templates/statefulset.yaml
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: deepflow-clickhouse
  labels:
    helm.sh/chart: clickhouse-0.1.000
    app: deepflow
    component: clickhouse
    app.kubernetes.io/name: clickhouse
    app.kubernetes.io/instance: deepflow
    app.kubernetes.io/version: "21.8.15.7"
    app.kubernetes.io/managed-by: Helm
spec:
  replicas: 1
  podManagementPolicy: OrderedReady
  serviceName: deepflow-clickhouse-headless
  selector:
    matchLabels:
      app: deepflow
      component: clickhouse
      app.kubernetes.io/name: clickhouse
      app.kubernetes.io/instance: deepflow
  template:
    metadata:
      labels:
        app: deepflow
        component: clickhouse
        app.kubernetes.io/name: clickhouse
        app.kubernetes.io/instance: deepflow
    spec:
      hostNetwork: false
      dnsPolicy: ClusterFirst
      imagePullSecrets:
      securityContext:
        {}
      initContainers:
        - name: clickhouse-init
          image: "registry.cn-beijing.aliyuncs.com/deepflow-ce/clickhouse-server:23.8.7.24"
          volumeMounts:
          - name: clickhouse-path
            mountPath: /var/lib/clickhouse/
          - name: clickhouse-storage-path
            mountPath: /var/lib/clickhouse_storage/
          command: ['sh', '-c', 'chown clickhouse:clickhouse /var/lib/clickhouse_storage;chown clickhouse:clickhouse /var/lib/clickhouse/']
      containers:
        - name: clickhouse
          securityContext:
            {}
          image: "registry.cn-beijing.aliyuncs.com/deepflow-ce/clickhouse-server:23.8.7.24"
          imagePullPolicy: Always
          env:
            - name: TZ
              value: "Asia/Shanghai"
          ports:
            - name: tcp
              containerPort: 9000
              protocol: TCP
          readinessProbe:
            tcpSocket:
              port: tcp
            initialDelaySeconds: 5
            periodSeconds: 10
          livenessProbe:
            tcpSocket:
              port: tcp
            initialDelaySeconds: 15
            periodSeconds: 20
          resources:
            {}
          volumeMounts:
          - name: clickhouse-config
            mountPath: /etc/clickhouse-server/
          - name: clickhouse-path
            mountPath: /var/lib/clickhouse/
          - name: clickhouse-storage-path
            mountPath: /var/lib/clickhouse_storage/
      affinity:      
        nodeAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
          preferredDuringSchedulingIgnoredDuringExecution:      
        podAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - podAffinityTerm:
              labelSelector:
                matchExpressions:
                - key: app
                  operator: In
                  values:
                  - "deepflow"
                - key: component
                  operator: In
                  values:
                  - "deepflow-server"
              topologyKey: kubernetes.io/hostname
            weight:  10      
        podAntiAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
          - labelSelector:
              matchExpressions:
              - key: app
                operator: In
                values:
                - "deepflow"
              - key: component
                operator: In
                values:
                - "clickhouse"
            topologyKey: kubernetes.io/hostname
      volumes:
        - name: clickhouse-config
          configMap:
            name: deepflow-clickhouse-config
  volumeClaimTemplates:  
  - kind: PersistentVolumeClaim
    apiVersion: v1
    metadata:
      name: clickhouse-path
      annotations:
          null
    spec:
      accessModes:
          - ReadWriteOnce
      resources:
        requests:
          storage: "200Gi"
  - kind: PersistentVolumeClaim
    apiVersion: v1
    metadata:
      name: clickhouse-storage-path
      annotations:
          null
    spec:
      accessModes:
          - ReadWriteOnce
      resources:
        requests:
          storage: "400Gi"
---
# Source: deepflow/charts/grafana/templates/tests/test-serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  labels:
    helm.sh/chart: grafana-7.3.12
    app.kubernetes.io/name: grafana
    app.kubernetes.io/instance: deepflow
    app.kubernetes.io/version: "10.4.3"
    app.kubernetes.io/managed-by: Helm
  name: deepflow-grafana-test
  namespace: deepflow
  annotations:
    "helm.sh/hook": test-success
    "helm.sh/hook-delete-policy": "before-hook-creation,hook-succeeded"
---
# Source: deepflow/charts/grafana/templates/tests/test-configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: deepflow-grafana-test
  namespace: deepflow
  annotations:
    "helm.sh/hook": test-success
    "helm.sh/hook-delete-policy": "before-hook-creation,hook-succeeded"
  labels:
    helm.sh/chart: grafana-7.3.12
    app.kubernetes.io/name: grafana
    app.kubernetes.io/instance: deepflow
    app.kubernetes.io/version: "10.4.3"
    app.kubernetes.io/managed-by: Helm
data:
  run.sh: |-
    @test "Test Health" {
      url="http://deepflow-grafana/api/health"

      code=$(wget --server-response --spider --timeout 90 --tries 10 ${url} 2>&1 | awk '/^  HTTP/{print $2}')
      [ "$code" == "200" ]
    }
---
# Source: deepflow/charts/grafana/templates/tests/test.yaml
apiVersion: v1
kind: Pod
metadata:
  name: deepflow-grafana-test
  labels:
    helm.sh/chart: grafana-7.3.12
    app.kubernetes.io/name: grafana
    app.kubernetes.io/instance: deepflow
    app.kubernetes.io/version: "10.4.3"
    app.kubernetes.io/managed-by: Helm
  annotations:
    "helm.sh/hook": test-success
    "helm.sh/hook-delete-policy": "before-hook-creation,hook-succeeded"
  namespace: deepflow
spec:
  serviceAccountName: deepflow-grafana-test
  containers:
    - name: deepflow-test
      image: "docker.io/bats/bats:v1.4.1"
      imagePullPolicy: "IfNotPresent"
      command: ["/opt/bats/bin/bats", "-t", "/tests/run.sh"]
      volumeMounts:
        - mountPath: /tests
          name: tests
          readOnly: true
  volumes:
    - name: tests
      configMap:
        name: deepflow-grafana-test
  restartPolicy: Never
